#!/usr/bin/env node

// Dependencies
var catversions = require('../')
  , lib = require('../lib')
  , colors = require('colors')
  , program = require('commander')
  , versionRg = /\d+\.\d+\.\d+/
  , dotRegex = /\.$/
  , path

// Args parse
program
  .version(require('../package.json').version)
  .option('-s, --sort', 'Sort by dev versions')
  .parse(process.argv)

// Defaults to actual path
path = program.args[0] || '.'

catversions(path, function (err, versions) {
  if (err) throw err

  var projects = Object.keys(versions)
    , projectsPadding = lib.rightPadding(projects)
    , dev = []
    , devVersions = {}
    , semVersions
    , versionsPadding

  // Get only the semversion format to determine
  // the left padding when printing
  semVersions = projects.map(function mapProjects (project) {
    var projectVersion = versions[project].split(versionRg)

    devVersions[project] = projectVersion[1]

    return versions[project]
      .replace(projectVersion[1], '')
      .replace(dotRegex, '')
  })

  // Get left padding function
  versionsPadding = lib.leftPadding(semVersions)

  if (program.sort) {
    projects = projects
      .filter(function filterProjects (project) {
        var hasDev = !!devVersions[project]

        if (hasDev) {
          dev.push(project)
        }

        return !hasDev
      })
      .sort()

    dev.sort()
  }

  projects
    .concat(dev)
    .forEach(function logEach (project) {
      var devVersion = devVersions[project]
        , version = versions[project].replace(devVersion, '')
      console.log(projectsPadding(project).cyan + ' ' + versionsPadding(version) + (devVersion && devVersion.length ? devVersion.red : ''))
    })

  /*projects
    .concat(devVersions)
    .forEach(function (project) {

    })*/

  /*var keys = Object.keys(dirs)
    , projectsPadding = lib.rightPadding(keys)
    , devVersions = []
    , versionsPadding
    , vs

  vs = keys.map(function (key) {
    return dirs[key]
      .replace(dirs[key].split(versionRg)[1], '')
      .replace(dotRegex, '')
  })

  versionsPadding = lib.leftPadding(vs)

  if (program.sort) {
    keys = keys
      .filter(function (key) {
        var hasDev = dirs[key].match(versionRg).length > 2

        if (hasDev) {
          devVersions.push(key)
        }

        return !hasDev
      })
      .sort()

    devVersions.sort()
  }

  keys
    .concat(devVersions)
    .forEach(function (dir) {
      var devVersion = dirs[dir].split(versionRg)[1]
        , v = dirs[dir].replace(devVersion, '')

      console.log(projectsPadding(dir).cyan + ' ' + versionsPadding(v) + devVersion.red)
    })*/
})
